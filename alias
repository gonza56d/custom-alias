# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias lfilter='ls |grep'
alias resetenv='deactivate; rm -rf venv && python3.10 -m venv venv && source venv/bin/activate && pip install --upgrade pip'
alias activate='source venv/bin/activate'
alias pi='pip install'
alias pir='pip install -r'
alias pif='pip freeze'
alias piff='pip freeze |grep'
alias requirements='pip install -r requirements.txt'
alias setuppy='pip install -e .'
alias dcr='docker compose run'
alias dcb='docker compose build'
alias dcu='docker compose up'
alias gc='git commit -m'
alias gcob='git checokut -b'
alias ga='git add'
alias gps='git push origin HEAD'
alias gpl='git pull' 
alias gm='git checkout master'
alias gmu='git checkout master && git pull' 
alias pycharm='nohup ~/PyCharm/bin/pycharm.sh & exit'
alias python='python3.10'
alias p='python3.10'
alias django='python3 manage.py runserver'
alias resetdb='rm db.sqlite3; python3.10 manage.py migrate; django'
alias loc='cd /Users/gonza56d/Work/repos/capital-line-of-credit'
alias bff='cd /Users/gonza56d/Work/repos/capital-bff'
alias integration='cd /Users/gonza56d/Work/repos/capital-integration-test'
alias repos='cd /Users/gonza56d/Work/repos'
alias home='cd ~' 
alias dkill='docker rm -f $(docker ps -q)'
alias gclean='git branch | grep -v "^\*" | grep -v " master$" | grep -v " main$" | xargs git branch -d'
alias dclean='docker rm -f $(docker ps -aq) ; docker system prune -af ; docker volume rm $(docker volume ls -q)'
alias v='nvim'
alias vcfg='nvim ~/.config/nvim/init.lua'
# move to master or main
function master() {
    if git show-ref --verify --quiet refs/heads/master; then
        git checkout master
    elif git show-ref --verify --quiet refs/heads/main; then
        git checkout main
    else
        echo "Neither master nor main branch found."
    fi
}
alias master='master'
# put comments in your git branches
function gcomment() {
    git config branch.$1.description $2
}
alias gcomment='gcomment'
# print your branches with their comments (if any)
function gb() {
    git branch | while read branch; do
        branch_name=$(echo $branch | sed 's/^*//g' | xargs)
        desc=$(git config branch."$branch_name".description 2>/dev/null)
        if [ -n "$desc" ]; then
            echo "$branch  # $desc"
        else
            echo "$branch"
        fi
    done
}
alias gb='gb'
# checkout your branch with its comment
function gco() {
    branch_name=$1
    git checkout "$branch_name"
    desc=$(git config branch."$branch_name".description 2>/dev/null)
    if [ -n "$desc" ]; then
        echo "Description: $desc"
    fi
}
alias gco='gco'
alias tmux='tmux -f ~/.tmux.conf'

ptest() {
    docker compose run --entrypoint="" $1 pytest $2 $3
}
